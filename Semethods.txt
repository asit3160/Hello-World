package wdMethods;

import java.io.File;
import java.io.IOException;
import java.util.concurrent.TimeUnit;

import org.apache.commons.io.FileUtils;
import org.openqa.selenium.OutputType;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.remote.RemoteWebDriver;
import org.openqa.selenium.support.ui.Select;

public class SeMethods implements WdMethods {
	public RemoteWebDriver driver=null;
	int i=1;
	public void startApp(String browser, String url) {
		if (browser.equalsIgnoreCase("chrome")) {
			System.setProperty("webdriver.chrome.driver", "./drivers/chromedriver.exe");
			driver = new ChromeDriver();
		} else if (browser.equalsIgnoreCase("firefox")) {
			System.setProperty("webdriver.gecko.driver", "./drivers/geckodriver.exe");
			driver = new FirefoxDriver();
		}
		driver.manage().window().maximize();
		driver.get(url);
		driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
		System.out.println("The Browser "+browser+" has been Launched Successfully");

	}

	public WebElement locateElement(String locator, String locValue) {
		WebElement ele =null;
		switch (locator) {
		case "id":
			ele = driver.findElementById(locValue);			
			break;
		case "class":
			ele =driver.findElementByClassName(locValue);
			break;				
		case "Link":
		ele=driver.findElementByLinkText(locValue);
               break;
		case "xpath":
		ele = driver.findElementByXPath(locValue);
		break;
		case "name":
		ele= driver.findElementByName(locValue);		}
		
		return ele;
	}

	public WebElement locateElement(String locValue) {
		// TODO Auto-generated method stub
		return null;
	}

	public void type(WebElement ele, String data) {
		ele.sendKeys(data);
		System.out.println("The Value have been entered Successfully "+data);
	}

	public void click(WebElement ele) {
		ele.click();
		System.out.println("Element is clicked Successfully");
	}

	public String getText(WebElement ele) {
		String text=ele.getText();
		return text;
	}

	public void selectDropDownUsingText(WebElement ele, String value) {
		// TODO Auto-generated method stub
		Select drop = new Select (ele);
		drop.selectByVisibleText(value);
	}

	public void selectDropDownUsingIndex(WebElement ele, int index) {
		Select drop = new Select (ele);
		drop.selectByIndex(index);

	}

	public boolean verifyTitle(String expectedTitle) {
		// TODO Auto-generated method stub
		
		boolean Title=driver.getTitle().equalsIgnoreCase(expectedTitle);
		return Title;
	}

	public void verifyExactText(WebElement ele, String expectedText) {
		if(ele.getText().equalsIgnoreCase(expectedText)){
			System.out.println("Text matches");
		}
		else{
			System.out.println("Not matching");
			
		}

	}

	public void verifyPartialText(WebElement ele, String expectedText) {
		if(ele.getText().contains(expectedText)){
			System.out.println("Text matches");
		}
		else{
			System.out.println("Not matching");
			
		}

	}

	public void verifyExactAttribute(WebElement ele, String attribute, String value) {
		if(ele.getAttribute(attribute).equalsIgnoreCase(value))
		{
			System.out.println("Text matches");
		}
		else{System.out.println("Not matching");}
	}

	public void verifyPartialAttribute(WebElement ele, String attribute, String value) {
		if(ele.getAttribute(attribute).contains(value))
		{
			System.out.println("Text matches");
		}
		else{System.out.println("Not matching");}


	}

	public void verifySelected(WebElement ele) {
		if(ele.isSelected())
		{
			System.out.println("Element is selected");
		}
		else 
			{System.out.println("Element is selected");}
	}

	public void verifyDisplayed(WebElement ele) {
		
		if(ele.isDisplayed())
		{
			System.out.println("Element is selected");
		}
		else 
			{System.out.println("Element is selected");}
	
		
	}

	public void switchToWindow(int index) {
driver.switchTo().frame(index);
	}

	public void switchToFrame(WebElement ele) {
		driver.switchTo().frame(ele);

	}

	public void acceptAlert() {
		driver.switchTo().alert().accept();

	}

	public void dismissAlert() {
		driver.switchTo().alert().dismiss();

	}

	public String getAlertText() {
		
		return driver.switchTo().alert().getText();
	}

	public void takeSnap() {
		File src= driver.getScreenshotAs(OutputType.FILE);
		File desc=new File("./Snaps/Snap"+i+".jpeg");
		try
		{
			FileUtils.copyFile(src, desc);
		}
		catch(IOException e)
		{
			e.printStackTrace();
		}
		i++;

	}

	public void closeBrowser() {
driver.close();
	}

	public void closeAllBrowsers() {
		driver.close();

	}

}
